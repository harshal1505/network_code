#ansible.netcommon.cli_parse â€“ Parse cli output or text using a variety of parsers
#This plugin is part of the ansible.netcommon collection (version 1.4.1).
#To install it use: ansible-galaxy collection install ansible.netcommon.
#To use it in a playbook, specify: ansible.netcommon.cli_parse.

#Docs
#https://docs.ansible.com/ansible/latest/network/user_guide/cli_parsing.html

#What is CLI Parser

#The ansible.netcommon collection version 1.2.0 or later includes the cli_parse module that can run CLI commands and parse the semi-structured text output.

#Parsing semi-structured data such as network configurations into structured data allows programmatic use of the data from that device. 
#Use cases include automated troubleshooting, creating dynamic documentation, updating IPAM (IP address management) tools and so on

#The cli_parse module includes the following cli_parsing plugins

native
The native parsing engine built into Ansible and requires no addition python libraries

xml
Convert XML to an Ansible native data structure

textfsm
A python module which implements a template based state machine for parsing semi-formatted text

ntc_templates
Predefined textfsm templates packages supporting a variety of platforms and commands

ttp
A library for semi-structured text parsing using templates, with added capabilities to simplify the process

pyats
Uses the parsers included with the Cisco Test Automation & Validation Solution

json
Converts JSON output at the CLI to an Ansible native data structure

- name: "Run command and parse with native"
  ansible.netcommon.cli_parse:
    command: show interface
      parser:
        name: ansible.netcommon.native
    set_fact: interfaces


# Using the ntc_templates parser

# -------------
# The ntc_templates use 'vendor_platform' for the file name
# it will be derived from ansible_network_os if not provided
# e.g. cisco.ios.ios => cisco_ios

To install it use: ansible-galaxy collection install ansible.netcommon.

- name: Run command and parse with ntc_templates
  ansible.netcommon.cli_parse:
    command: "show interface"
    parser:
      name: ansible.netcommon.ntc_templates
  register: parser_output

- name: Pass text and command
  ansible.netcommon.cli_parse:
    text: "{{ previous_command['stdout'] }}"
    parser:
      name: ansible.netcommon.ntc_templates
      command: show interface
  register: parser_output
